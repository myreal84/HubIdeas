package com.dominikpetrich.hubideas

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.unit.dp
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import androidx.lifecycle.viewmodel.compose.viewModel
import com.dominikpetrich.hubideas.ui.ProjectListViewModel
import com.dominikpetrich.hubideas.ui.ProjectListViewModelFactory
import com.dominikpetrich.hubideas.ui.ProjectDetailViewModel
import com.dominikpetrich.hubideas.ui.ProjectDetailViewModelFactory
import com.dominikpetrich.hubideas.data.local.entity.TodoEntity

class MainActivity : ComponentActivity() {
    private val listVm by viewModels<ProjectListViewModel> { ProjectListViewModelFactory(applicationContext) }
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent { HubideasApp(listVm) }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HubideasApp(listVm: ProjectListViewModel) {
    val DarkColors = darkColorScheme(
        primary = Color(0xFF00C853), onPrimary = Color(0xFF001408),
        secondary = Color(0xFF1DE9B6), onSecondary = Color(0xFF001410),
        background = Color(0xFF0E1116), onBackground = Color(0xFFE6EAEF),
        surface = Color(0xFF12151B), onSurface = Color(0xFFF1F4F8)
    )
    val nav = rememberNavController()
    MaterialTheme(colorScheme = DarkColors) {
        // global Scaffold entfernt -> jede Screen kümmert sich um ihre TopBar
        Box(Modifier.fillMaxSize()) {
            NavHost(navController = nav, startDestination = "projects") {
                composable("projects") {
                    ProjectListScreen(listVm, onOpen = { id -> nav.navigate("project/$id") })
                }
                composable(
                    route = "project/{id}",
                    arguments = listOf(navArgument("id") { type = NavType.LongType })
                ) { backStackEntry ->
                    val pid = backStackEntry.arguments?.getLong("id") ?: 0L
                    val vm: ProjectDetailViewModel = viewModel(
                        factory = ProjectDetailViewModelFactory(
                            context = LocalContext.current.applicationContext,
                            projectId = pid
                        )
                    )
                    ProjectDetailScreen(vm, onBack = { nav.popBackStack() })
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProjectListScreen(vm: ProjectListViewModel, onOpen: (Long) -> Unit) {
    var text by rememberSaveable(stateSaver = TextFieldValue.Saver) { mutableStateOf(TextFieldValue("")) }
    var alsoNote by rememberSaveable { mutableStateOf(false) }
    val projects by vm.projects.collectAsState()

    Scaffold(
        topBar = { CenterAlignedTopAppBar(title = { Text("ideahub") }) }
    ) { inner ->
        Column(
            Modifier.fillMaxSize().padding(inner).padding(horizontal = 12.dp, vertical = 6.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Column(Modifier.widthIn(max = 620.dp).fillMaxWidth()) {
                Surface(shape = MaterialTheme.shapes.large, tonalElevation = 2.dp, modifier = Modifier.fillMaxWidth()) {
                    Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(10.dp)) {
                        OutlinedTextField(
                            value = text, onValueChange = { text = it }, placeholder = { Text("Neues Projekt…") },
                            maxLines = 2, modifier = Modifier.weight(1f),
                            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
                            keyboardActions = KeyboardActions(onDone = {
                                val t = text.text.trim()
                                if (t.isNotEmpty()) { vm.addProject(t, alsoNote); text = TextFieldValue("") }
                            })
                        )
                        Spacer(Modifier.width(8.dp))
                        FilledTonalButton(onClick = {
                            val t = text.text.trim()
                            if (t.isNotEmpty()) { vm.addProject(t, alsoNote); text = TextFieldValue("") }
                        }) { Text("Erstellen") }
                    }
                }
                Spacer(Modifier.height(8.dp))
                // Checkbox: beim Erstellen auch Notiz im Projekt anlegen?
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Checkbox(checked = alsoNote, onCheckedChange = { alsoNote = it })
                    Spacer(Modifier.width(6.dp))
                    Text("Auch eine Notiz im Projekt anlegen (gleicher Name)")
                }

                Spacer(Modifier.height(12.dp))
                HorizontalDivider()
                Spacer(Modifier.height(6.dp))
                if (projects.isEmpty()) {
                    Text("Noch keine Projekte. Oben eines anlegen.", color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f))
                } else {
                    LazyColumn(Modifier.fillMaxSize(), verticalArrangement = Arrangement.spacedBy(8.dp)) {
                        items(projects, key = { it.id }) { p ->
                            ProjectRow(
                                name = p.name,
                                onOpen = { onOpen(p.id) },
                                onRename = { newName -> vm.rename(p.id, newName) },
                                onRemove = { vm.delete(p.id) }
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun ProjectRow(name: String, onOpen: () -> Unit, onRename: (String) -> Unit, onRemove: () -> Unit) {
    var menu by remember { mutableStateOf(false) }
    var showRename by remember { mutableStateOf(false) }
    var temp by rememberSaveable(stateSaver = TextFieldValue.Saver) { mutableStateOf(TextFieldValue(name)) }
    Surface(shape = MaterialTheme.shapes.large, tonalElevation = 2.dp, modifier = Modifier.fillMaxWidth().clickable { onOpen() }) {
        Row(Modifier.padding(12.dp), verticalAlignment = Alignment.CenterVertically) {
            Text(text = name, modifier = Modifier.weight(1f))
            Box {
                IconButton(onClick = { menu = true }) { Text("⋮", style = MaterialTheme.typography.titleLarge) }
                DropdownMenu(expanded = menu, onDismissRequest = { menu = false }) {
                    DropdownMenuItem(text = { Text("Umbenennen") }, onClick = { menu = false; showRename = true })
                    DropdownMenuItem(text = { Text("Löschen") }, onClick = { menu = false; onRemove() })
                }
            }
        }
    }
    if (showRename) {
        AlertDialog(
            onDismissRequest = { showRename = false },
            title = { Text("Projekt umbenennen") },
            text = { OutlinedTextField(value = temp, onValueChange = { temp = it }, modifier = Modifier.fillMaxWidth()) },
            confirmButton = { TextButton(onClick = { val t = temp.text.trim(); if (t.isNotEmpty()) { onRename(t); showRename = false } }) { Text("Speichern") } },
            dismissButton = { TextButton(onClick = { showRename = false }) { Text("Abbrechen") } }
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProjectDetailScreen(vm: ProjectDetailViewModel, onBack: () -> Unit) {
    val project by vm.project.collectAsState()
    val todos by vm.todos.collectAsState()

    Scaffold(
        topBar = {
            // Zurück-Button links in der Kopfzeile, Checkbox (ohne Text) direkt rechts neben dem Titel
            TopAppBar(
                navigationIcon = {
                    IconButton(onClick = onBack) { Text("←", style = MaterialTheme.typography.titleLarge) }
                },
                title = {
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Text(project?.name ?: "…")
                        Spacer(Modifier.width(8.dp))
                        Checkbox(
                            checked = project?.isDone == true,
                            onCheckedChange = { vm.toggleProject(it) }
                        )
                    }
                }
            )
        }
    ) { inner ->
        Column(Modifier.fillMaxSize().padding(inner).padding(12.dp)) {
            var text by rememberSaveable(stateSaver = TextFieldValue.Saver) { mutableStateOf(TextFieldValue("")) }
            Surface(shape = MaterialTheme.shapes.large, tonalElevation = 2.dp, modifier = Modifier.fillMaxWidth()) {
                Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.padding(10.dp)) {
                    OutlinedTextField(
                        value = text, onValueChange = { text = it }, placeholder = { Text("Neue Aufgabe/Notiz…") },
                        maxLines = 2, modifier = Modifier.weight(1f),
                        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
                        keyboardActions = KeyboardActions(onDone = {
                            val t = text.text.trim(); if (t.isNotEmpty()) { vm.addTodo(t); text = TextFieldValue("") }
                        })
                    )
                    Spacer(Modifier.width(8.dp))
                    FilledTonalButton(onClick = {
                        val t = text.text.trim(); if (t.isNotEmpty()) { vm.addTodo(t); text = TextFieldValue("") }
                    }) { Text("Hinzufügen") }
                }
            }
            Spacer(Modifier.height(8.dp))
            if (todos.isEmpty()) {
                Text("Noch keine Aufgaben.", color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f))
            } else {
                LazyColumn(Modifier.fillMaxSize(), verticalArrangement = Arrangement.spacedBy(8.dp)) {
                    items(todos, key = { it.id }) { t ->
                        TodoRow(t, onToggle = { vm.toggleTodo(t.id, it) }, onRemove = { vm.deleteTodo(t.id) })
                    }
                }
            }
        }
    }
}

@Composable
fun TodoRow(item: TodoEntity, onToggle: (Boolean) -> Unit, onRemove: () -> Unit) {
    var menu by remember { mutableStateOf(false) }
    Surface(shape = MaterialTheme.shapes.large, tonalElevation = 1.dp, modifier = Modifier.fillMaxWidth()) {
        Row(Modifier.padding(12.dp), verticalAlignment = Alignment.CenterVertically) {
            Checkbox(checked = item.isDone, onCheckedChange = onToggle)
            Spacer(Modifier.width(6.dp))
            Text(text = item.title, modifier = Modifier.weight(1f))
            Box {
                IconButton(onClick = { menu = true }) { Text("⋮", style = MaterialTheme.typography.titleLarge) }
                DropdownMenu(expanded = menu, onDismissRequest = { menu = false }) {
                    DropdownMenuItem(text = { Text("Löschen") }, onClick = { menu = false; onRemove() })
                }
            }
        }
    }
}
